# Generated by Django 4.2.8 on 2024-10-16 14:00

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MenuButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=22, verbose_name='текст на кнопке')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='расположение')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.menubutton')),
            ],
            options={
                'verbose_name': 'меню',
                'verbose_name_plural': 'меню',
                'abstract': False,
                'default_related_name': '%(class)ss',
            },
        ),
        migrations.CreateModel(
            name='MenuUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='время создания')),
                ('telegram', models.DateTimeField(blank=True, null=True, verbose_name='Telegram')),
                ('vk', models.DateTimeField(blank=True, null=True, verbose_name='VK')),
            ],
            options={
                'verbose_name': 'обновление меню',
                'verbose_name_plural': 'обновления меню',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=22, unique=True, verbose_name='название')),
                ('menu', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.menubutton', verbose_name='меню')),
            ],
            options={
                'verbose_name': 'роль',
                'verbose_name_plural': 'роли',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('tg', 'Telegram'), ('vk', 'VK')], max_length=2, verbose_name='платформа')),
                ('platform_id', models.BigIntegerField(verbose_name='ID')),
                ('is_subscribed', models.BooleanField(default=False, verbose_name='подписан')),
                ('date_subscribed', models.DateTimeField(blank=True, default=None, null=True, verbose_name='дата подписки')),
                ('is_blocked', models.BooleanField(default=False, verbose_name='заблокировать')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.role', verbose_name='роль')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
        ),
        migrations.CreateModel(
            name='SubButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=22, verbose_name='текст на кнопке')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='расположение')),
                ('on_name', models.CharField(default='Подписаться', max_length=22, verbose_name='текст на кнопке при подписке')),
                ('off_name', models.CharField(default='Отписаться', max_length=22, verbose_name='текст на кнопке при отписке')),
                ('on_answer', models.TextField(default='Вы подписаны на рассылку.', verbose_name='сообщение если пользователь подписан')),
                ('off_answer', models.TextField(default='Вы не подписаны на рассылку.', verbose_name='сообщение если пользователь не подписан')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.menubutton')),
            ],
            options={
                'verbose_name': 'подписка',
                'abstract': False,
                'default_related_name': '%(class)ss',
            },
        ),
        migrations.CreateModel(
            name='ReminderButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=22, verbose_name='текст на кнопке')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='расположение')),
                ('answer', models.TextField(verbose_name='ответ')),
                ('text', models.TextField(verbose_name='текст напоминания')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.menubutton')),
            ],
            options={
                'verbose_name': 'напоминание',
                'abstract': False,
                'default_related_name': '%(class)ss',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(verbose_name='вопрос')),
                ('answer', models.TextField(blank=True, verbose_name='ответ')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='дата и время публикации')),
                ('answered', models.DateTimeField(blank=True, default=None, null=True, verbose_name='дата и время ответа')),
                ('answer_sent', models.DateTimeField(blank=True, default=None, null=True, verbose_name='ответ отправлен пользователю')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.user', verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'вопрос',
                'verbose_name_plural': 'вопросы',
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='InfoButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=22, verbose_name='текст на кнопке')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='расположение')),
                ('answer', models.TextField(verbose_name='ответ')),
                ('file', models.FileField(blank=True, null=True, upload_to='files/', verbose_name='файл')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.menubutton')),
            ],
            options={
                'verbose_name': 'информационная кнопка',
                'verbose_name_plural': 'информационные кнопки',
                'abstract': False,
                'default_related_name': '%(class)ss',
            },
        ),
        migrations.CreateModel(
            name='AskAdminButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=22, verbose_name='текст на кнопке')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='расположение')),
                ('answer', models.TextField(verbose_name='ответ')),
                ('received_answer', models.TextField(verbose_name='ответ при получении вопроса')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.menubutton')),
            ],
            options={
                'verbose_name': 'вопрос админу',
                'abstract': False,
                'default_related_name': '%(class)ss',
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_id', models.BigIntegerField(blank=True, null=True, unique=True, verbose_name='Telegram ID')),
                ('vk_id', models.BigIntegerField(blank=True, null=True, unique=True, verbose_name='VK ID')),
                ('is_staff', models.BooleanField(default=False, verbose_name='доступ в админ-панель')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'администратор',
                'verbose_name_plural': 'администраторы',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClosedQuestion',
            fields=[
            ],
            options={
                'verbose_name': 'закрытый вопрос',
                'verbose_name_plural': 'архив вопросов',
                'ordering': ('answered',),
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.question',),
        ),
        migrations.CreateModel(
            name='QuestionStats',
            fields=[
            ],
            options={
                'verbose_name': 'статистика вопросов/ответов',
                'verbose_name_plural': 'статистика вопросов/ответов',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.question',),
        ),
        migrations.CreateModel(
            name='SubscriberStats',
            fields=[
            ],
            options={
                'verbose_name': 'статистика активных подписчиков',
                'verbose_name_plural': 'статистика активных подписчиков',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.user',),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('platform', 'platform_id'), name='unique_user'),
        ),
    ]
